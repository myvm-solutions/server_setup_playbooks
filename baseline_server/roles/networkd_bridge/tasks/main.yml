---
# This role contains netowrk config plays for bridge devices (maybe or maybe not specific to vmhosts)

# Set these in global vars file?
- name: Set playbook vars
  set_fact:
    # bridge_num: "1"
    dhcp_server: "192.168.0.252"  # DrSUSE
    bridges:
      1: eth    # built-in rock64 eth0
      2: enx    # usb?
      10: enp   # 10g rockpro pcie enp1s0

- name: Configure systemd bridge device
  ansible.builtin.template:
    src: "systemd_brx.{{ ci }}.j2"
    dest: "/etc/systemd/network/br{{ br }}.{{ ci }}"
  loop: "{{ bridges | dict2items | product(config_items) | list }}"
  vars:
    config_items:
      - netdev
      - network
    br: "{{ item.0.key }}"
    dev: "{{ item.0.value }}"
    ci: "{{ item.1 }}"
  register: bridge_device
  notify: reboot_host

- name: Configure systemd bridge members
  ansible.builtin.template:
    src: "systemd_bridge_member.j2"
    dest: "/etc/systemd/network/{{ dev }}_br{{ br }}_member.network"
  loop: "{{ bridges | dict2items }}"
  vars:
    br: "{{ item.key }}"
    dev: "{{ item.value }}"
  register: bridge_members
  notify: reboot_host

- name: Enable service systemd-networkd # and ensure it is not masked
  ansible.builtin.systemd_service:
    name: systemd-networkd
    # do we need separate services to unmask BEFORE enabling?
    enabled: true
    masked: no
  # when: bridge_num is defined # always run this task when above bridge and NM task have run
  register: systemd_enabled
  notify: reboot_host

# This should be accomplished with handlers
- name: Check if reboot is required
  set_fact:
    needs_reboot: "{{ systemd or device or members }}"
    purge_nm: "{{ systemd and device and members }}"
  vars:
    systemd: "{{ systemd_enabled.changed }}"
    device: "{{ bridge_device.changed }}"
    members: "{{ bridge_members.changed }}"
    # nm: "{{ nm_purged.changed }}"

# - debug:
#     var: needs_reboot

# This task is important, but make sure systemd-networkd is working/configured before enabling
- name: Purge Network-Manager
  ansible.builtin.apt:
    state: absent
    purge: yes
    autoremove: yes
    pkg:
      - network-manager
      - wpasupplicant
  when: purge_nm # only when all networkd bridge tasks succeed
  # register: nm_purged

# Below could be reconfigured as handlers

# Delete entris from DHCP leases file after reconfiguring netdevs
- name: Clear entries from DHCP leases
  ansible.builtin.lineinfile:
    path: /var/lib/misc/dnsmasq.leases
    regexp: "(?i){{ item }}"
    state: absent
  loop: "{{ ansible_play_batch }}"
  run_once: true
  delegate_to: "{{ dhcp_server }}"
  when: hostvars[item]['needs_reboot']
  notify: restart_dhcp
