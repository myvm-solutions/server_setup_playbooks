---
# This playbook contains common plays that will be run on all nodes.

- name: Set playbook vars
  set_fact:
    bridge_num: "1"
    dhcp_server: "192.168.0.252"  # DrSUSE

- name: test to see if selinux is running
  command: getenforce
  register: sestatus
  changed_when: false
  ignore_errors: true
  when: false # Have to install/enable SELinux first

- name: install apt packages
  # Todo: streamline package list for prod
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 28800 # 8 Hours
    pkg:
      - screen
      - git
      - vim
      - locate
      - net-tools
      - traceroute
      - nfs-common
      - rxvt-unicode  # available on Armbian Jammy
      # - rxvt-unicode-256color

- name: Copy local ssh authorizaiton
  ansible.builtin.copy:
    src: ~/.ssh/authorized_keys
    dest: ~/.ssh/
    # owner: root
    # group: root
    mode: '0644'
  become: no


# Below network configs may belong in VM role or separate one?

- name: Configure systemd bridge device
  when: bridge_num is defined
  ansible.builtin.template:
    src: "systemd_brx.{{ item }}.j2"
    dest: "/etc/systemd/network/br{{ bridge_num }}.{{ item }}"
  with_items:
    - netdev
    - network
  register: bridge_device

- name: Configure systemd bridge members
  when: bridge_num is defined
  ansible.builtin.template:
    src: "systemd_bridge_member.j2"
    dest: "/etc/systemd/network/{{ item }}_br{{ bridge_num }}_member.network"
  with_items:
    - eth
    - enx
  register: bridge_members

# This task is important, but make sure systemd-networkd is working/configured before enabling
- name: Purge Network-Manager
  ansible.builtin.apt:
    state: absent
    purge: yes
    autoremove: yes
    pkg:
      - network-manager
  when: bridge_num is defined # only when above bridge task ran
  register: nm_purged

- name: Enable service systemd-networkd # and ensure it is not masked
  ansible.builtin.systemd_service:
    name: systemd-networkd
    # do we need separate services to unmask BEFORE enabling?
    enabled: true
    masked: no
  when: bridge_num is defined # always run this task when above bridge and NM task have run
  register: systemd_enabled

- name: Check if reboot is required
  set_fact:
    needs_reboot: "{{ systemd or nm or device or members }}"
  vars:
    systemd: "{{ systemd_enabled.changed }}"
    nm: "{{ nm_purged.changed }}"
    device: "{{ bridge_device.changed }}"
    members: "{{ bridge_members.changed }}"

# - debug:
#     var: needs_reboot

# Delete entris from DHCP leases file after reconfiguring netdevs
- name: Clear entries from DHCP leases
  ansible.builtin.lineinfile:
    path: /var/lib/misc/dnsmasq.leases
    regexp: "(?i){{ item }}"
    state: absent
  loop: "{{ ansible_play_batch }}"
  run_once: true
  delegate_to: "{{ dhcp_server }}"
  when: hostvars[item]['needs_reboot']

- name: Restart DHCP service
  ansible.builtin.systemd_service:
    state: restarted
    name: dnsmasq.service
  run_once: true
  delegate_to: "{{ dhcp_server }}"

- name: Reboot hosts
  ansible.builtin.reboot:
  # when: systemd_enabled.changed == true
  when: needs_reboot



# TODO:

# ## systemd networkd usb bridge on LTS ##
# echo "[Match]
# Name=enx*
# [Network]
# Bridge=br0" | sudo tee /etc/systemd/network/usb.network

# echo "[NetDev]
# Name=br0
# Kind=bridge" | sudo tee /etc/systemd/network/br0.netdev

# echo "[Match]
# Name=br0
# [Network]
# DHCP=no
# #DHCP=yes" | sudo tee /etc/systemd/network/br0.network

# echo "[Match]
# Name=eth*
# #[Link]
# #RequiredForOnline=no
# #MTUBytes=9000
# [Network]
# DHCP=yes
# #LLDP=yes
# " | sudo tee /etc/systemd/network/gigE.network


# garrettj@pine64s0:~$ apt-mark showhold
# armbian-firmware
# linux-bionic-root-next-pine64so
# linux-dtb-next-sunxi64
# linux-image-next-sunxi64
# linux-u-boot-pine64so-next
# ? linux-headers-next-sunxi64 ?


# processes_to_disable="armbian-zram-config armbian-ramlog unattended-upgrades NetworkManager"
# for i in $processes_to_disable; do
#  #sudo systemctl stop $i || echo couldn\'t stop $i
#  sudo systemctl disable $i || echo couldn\'t disable $i
#  systemctl status $i
# done




# - name: Install ntp
#   yum:
#     name: ntp
#     state: present
#   tags: ntp

# - name: Configure ntp file
#   template:
#     src: ntp.conf.j2
#     dest: /etc/ntp.conf
#   tags: ntp
#   notify: restart ntp

# - name: Start the ntp service
#   service:
#     name: ntpd
#     state: started
#     enabled: yes
#   tags: ntp
